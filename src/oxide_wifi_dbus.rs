// This code was autogenerated with `dbus-codegen-rust `, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_tree as tree;

pub trait CodesEeemsOxide1Wifi {
    fn enable(&self) -> Result<bool, tree::MethodErr>;
    fn disable(&self) -> Result<(), tree::MethodErr>;
    fn add_network(&self, ssid: &str, properties: arg::PropMap) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn get_network(&self, properties: arg::PropMap) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn get_bss(&self, properties: arg::PropMap) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn scan(&self, active: bool) -> Result<(), tree::MethodErr>;
    fn scan_(&self) -> Result<(), tree::MethodErr>;
    fn reconnect(&self) -> Result<(), tree::MethodErr>;
    fn reassosiate(&self) -> Result<(), tree::MethodErr>;
    fn disconnect(&self) -> Result<(), tree::MethodErr>;
    fn flush_bsscache(&self, age: u32) -> Result<(), tree::MethodErr>;
    fn add_blob(&self, name: &str, blob: Vec<u8>) -> Result<(), tree::MethodErr>;
    fn remove_blob(&self, name: &str) -> Result<(), tree::MethodErr>;
    fn get_blob(&self, name: &str, blob: Vec<u8>) -> Result<Vec<u8>, tree::MethodErr>;
    fn state(&self) -> Result<i32, tree::MethodErr>;
    fn b_sss(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn link(&self) -> Result<i32, tree::MethodErr>;
    fn network(&self) -> Result<dbus::Path<'static>, tree::MethodErr>;
    fn networks(&self) -> Result<Vec<dbus::Path<'static>>, tree::MethodErr>;
    fn scanning(&self) -> Result<bool, tree::MethodErr>;
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiStateChanged {
    pub arg0: i32,
}

impl arg::AppendAll for CodesEeemsOxide1WifiStateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiStateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiStateChanged {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiStateChanged {
    const NAME: &'static str = "stateChanged";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiLinkChanged {
    pub arg0: i32,
}

impl arg::AppendAll for CodesEeemsOxide1WifiLinkChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiLinkChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiLinkChanged {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiLinkChanged {
    const NAME: &'static str = "linkChanged";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiNetworkAdded {
    pub arg0: dbus::Path<'static>,
}

impl arg::AppendAll for CodesEeemsOxide1WifiNetworkAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiNetworkAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiNetworkAdded {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiNetworkAdded {
    const NAME: &'static str = "networkAdded";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiNetworkRemoved {
    pub arg0: dbus::Path<'static>,
}

impl arg::AppendAll for CodesEeemsOxide1WifiNetworkRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiNetworkRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiNetworkRemoved {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiNetworkRemoved {
    const NAME: &'static str = "networkRemoved";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiNetworkConnected {
    pub arg0: dbus::Path<'static>,
}

impl arg::AppendAll for CodesEeemsOxide1WifiNetworkConnected {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiNetworkConnected {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiNetworkConnected {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiNetworkConnected {
    const NAME: &'static str = "networkConnected";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiDisconnected {
}

impl arg::AppendAll for CodesEeemsOxide1WifiDisconnected {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiDisconnected {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiDisconnected {
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiDisconnected {
    const NAME: &'static str = "disconnected";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiBssFound {
    pub arg0: dbus::Path<'static>,
}

impl arg::AppendAll for CodesEeemsOxide1WifiBssFound {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiBssFound {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiBssFound {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiBssFound {
    const NAME: &'static str = "bssFound";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiBssRemoved {
    pub arg0: dbus::Path<'static>,
}

impl arg::AppendAll for CodesEeemsOxide1WifiBssRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiBssRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiBssRemoved {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiBssRemoved {
    const NAME: &'static str = "bssRemoved";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}

#[derive(Debug)]
pub struct CodesEeemsOxide1WifiScanningChanged {
    pub arg0: bool,
}

impl arg::AppendAll for CodesEeemsOxide1WifiScanningChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for CodesEeemsOxide1WifiScanningChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(CodesEeemsOxide1WifiScanningChanged {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for CodesEeemsOxide1WifiScanningChanged {
    const NAME: &'static str = "scanningChanged";
    const INTERFACE: &'static str = "codes.eeems.oxide1.Wifi";
}
